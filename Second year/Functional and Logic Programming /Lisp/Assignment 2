;7. Return the level of a node X in a tree of type (1). The level of the root element is 0.

;  A
; / \
;B   C
;   / \
;  D   E
;
;is represented as follows:
;(A 2 B 0 C 2 D 0 E 0)

; nv = nr vertices, nm = nr muchii
; traverseLeft(l1l2..ln, nv, nm) = 
;   { [], if n = 0
;   { [], if nv = nm + 1 
;   { l1 U l2 U traverseLeft(l3...ln, nv+1, nm+l2)

(defun traverseLeft(arb nv nm)
    (cond
        ((null arb) nil)
        ((= nv (+ 1 nm)) nil)
        (t (cons (car arb)
             (cons (cadr arb)
                 (traverseLeft (cddr arb) (+ 1 nv) (+ (cadr arb) nm))
             )
           )
        )
    )
)


(defun leftTree (arb)
    (traverseLeft (cddr arb) 0 0)
)


; nv = nr vertices, nm = nr muchii
; traverseRight(l1l2..ln, nv, nm) = 
;   { [], if n = 0
;   { l1l2...ln, if nv = nm + 1 
;   { traverseRight(l3...ln, nv+1, nm+l2)

(defun traverseRight(arb nv nm)
 (cond
    ((null arb) nil)
    ((= nv (+ nm 1)) arb)
    (t (traverseRight(cddr arb) (+ 1 nv) (+ (cadr arb) nm)))
 )
)


(defun rightTree (arb)
    (traverseRight (cddr arb) 0 0)
)



; node_level_aux(l1l2..ln, elem, lvl) = 
;   { -1 , if elem does not exist
;   { lvl, if elem = l1
;   { X, if X!=-1, where X = node_level_aux(leftTree(l1l2...ln), elem, lvl+1) 
;   { node_level_aux(rightTree(l1l2...ln), elem, lvl+1)

(defun node_level_aux (arb e lvl)
  (cond
      ((null arb) -1)
      ((equal e (car arb)) lvl )
      (( /= (setf X (node_level_aux (leftTree arb) e (+ 1 lvl))) -1 ) X )
      (t (node_level_aux (rightTree arb) e (+ 1 lvl )))
  )
)



(defun node_level (l e)
  (node_level_aux l e 0)
)

; Example usage:
(print (node_level '(A 2 B 0 C 2 D 0 E 0) 'A)) ; 0
(print (node_level '(A 2 B 0 C 2 D 0 E 0) 'B)) ; 1
(print (node_level '(A 2 B 0 C 2 D 0 E 0) 'D)) ; 2
(print (node_level '(A 2 B 0 C 2 D 0 E 0) 'F)) ;-1
(print (node_level '(A 2 B 0 C 2 D 0 E 0) 'E)) ; 2
